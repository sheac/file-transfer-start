#!/usr/bin/env bash

source tools/aux/env

function ensure_postgres_data_dir {
    if [[ ! -d "$PG_VOL_PATH/$PG_VOL_DIR" ]]; then
        echo "creating postgres data directory: $PG_VOL_PATH/$PG_VOL_DIR"
        sudo mkdir -p $PG_VOL_PATH
        sudo mkdir -p $PG_VOL_PATH/$PG_VOL_DIR
    fi
}

function ensure_postgres_container_running {
    if does_container_exist $PG_CONTAINER_NAME ; then
        if is_container_running $PG_CONTAINER_NAME ; then
            echo "postgres container is already running"
        else
            start_postgres_container
        fi
    else
        create_and_start_postgres_container
    fi
}

function ensure_app_container_running {
    if does_container_exist $CONTAINER_NAME ; then
        if is_container_running $CONTAINER_NAME ; then
            echo "app container is already running"
        else
            start_app_container
        fi
    else
        create_and_start_app_container
    fi
}

function does_container_exist {
    local container_name=$1
    docker ps --all | grep -wq $container_name

    if [[ $? -eq 0 ]] ; then
        return 0
    else
        return 1
    fi
}

function is_container_running {
    local container_name=$1
    docker ps | grep -wq $container_name

    if [[ $? -eq 0 ]] ; then
        return 0
    else
        return 1
    fi
}

function is_postgres_container_ready {
    local container_ip=$(docker inspect --format='{{.NetworkSettings.IPAddress}}' $PG_CONTAINER_NAME)
    nc -z $container_ip 5432

    if [[ $? -eq 0 ]] ; then
        return 0
    else
        return 1
    fi
}

function create_and_start_postgres_container {
    echo "creating and starting postgres container"
    docker run \
        --name $PG_CONTAINER_NAME \
        --volume $PG_VOL_PATH/$PG_VOL_DIR \
        -d $PG_IMAGE_NAME
}

function start_postgres_container {
    echo "starting postgres container"
    docker start $PG_CONTAINER_NAME
}

function stop_postgres_container {
    if does_container_exist $PG_CONTAINER_NAME ; then
        if is_container_running $PG_CONTAINER_NAME ; then
            echo "stopping postgres container"
            docker stop $PG_CONTAINER_NAME
        fi
    fi
}

function destroy_postgres_container {
    if does_container_exist $PG_CONTAINER_NAME ; then
        if is_container_running $PG_CONTAINER_NAME ; then
            stop_postgres_container
        fi
        echo "destroying postgres container"
        docker rm $PG_CONTAINER_NAME
    fi
}

function does_app_image_exist {
    docker images | grep -wq $IMAGE_NAME
}

function build_app_image {
    echo "building app image"
    docker build -t $IMAGE_NAME .
}

function create_and_start_app_container {
    echo "creating and starting app container"
    docker run -it \
        --name $CONTAINER_NAME \
        --link $PG_CONTAINER_NAME:$PG_HOST \
        --volume $(pwd):/app \
        $IMAGE_NAME \
        /bin/bash
}

function start_app_container {
    echo "starting app container"
    echo "to return, use the 'exit' command to close the shell"
    echo
    echo

    docker start $CONTAINER_NAME
}

function stop_app_container {
    if does_container_exist $CONTAINER_NAME ; then
        if is_container_running $CONTAINER_NAME ; then
            echo "stopping app container"
            docker stop $CONTAINER_NAME
        fi
    fi
}

function destroy_app_container {
    if does_container_exist $CONTAINER_NAME ; then
        if is_container_running $CONTAINER_NAME ; then
            stop_app_container
        fi
        echo "destroying app container"
        docker rm $CONTAINER_NAME
    fi
}

function run_db_script {
    docker run -it --rm \
        --link $PG_CONTAINER_NAME:$PG_HOST \
        --env "PG_HOST=$PG_HOST" \
        --volume $(pwd):/app \
        $IMAGE_NAME \
        $@
}